# @package _global_

data:
  resolution: 64
  channels: 3
  patch_size: 8
  mean: [0.485, 0.456, 0.406]
  std: [0.229, 0.224, 0.225]
  classes: 200
  patch: 8

datasets:
  train:
    _target_: torchvision.datasets.ImageFolder
    root: ${base_data_home}/tiny-imagenet-200/train
    transform: ${transformation.train}

  val:
    _target_: torchvision.datasets.ImageFolder
    root: ${base_data_home}/tiny-imagenet-200/val
    transform: ${transformation.val}

  test:
    _target_: torchvision.datasets.ImageFolder
    root: ${base_data_home}/tiny-imagenet-200/val
    transform: ${transformation.val}

extradata:
  pcamodule:
    _target_ : numpy.load
    file: ${base_data_home}/tiny-imagenet-200/pc_matrix.npy

  eigenmodule:
    _target_: numpy.load
    file: ${base_data_home}/tiny-imagenet-200/eigenvalues.npy

  eigenratiomodule:
    _target_: numpy.load
    file: ${base_data_home}/tiny-imagenet-200/eigenvalues_ratio.npy

datamodule: 
  _target_: dataset.dataloader.DataModule
  batch_size: 512
  num_workers: 8
  classes: ${data.classes}
  channels: ${data.channels}
  resolution: ${data.resolution}

datamodule_eval:
  _target_: dataset.dataloader.DataModule
  batch_size: 4096
  num_workers: ${datamodule.num_workers}
  classes: ${data.classes}
  channels: ${data.channels}
  resolution: ${data.resolution}